import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.command import Command, CommandObject
from dotenv import dotenv_values
import datetime
import webbrowser


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
config = dotenv_values(".env")
bot = Bot(token=config["BOT_TOKEN"])
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
dp['my_list'] = []

@dp.message(Command('datetime'))
async def add_to_list(message: types.Message, my_list: list):
    my_list.append(datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))
    await message.reply(f'–°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–∫ {str(my_list)}')

@dp.message(Command('dice'))
async def dice(message: types.Message):
    await message.answer_dice(emoji='üé≤')

@dp.message(Command('settimer'))
async def cmd_settimer(
        message: types.Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
)

    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/settimer <time> <message>"
)
        return
    if delay_time == 20:
        await message.answer('....'
)
    else:
        await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
)

@dp.message(Command("ugadaika"))
async def reply_builder(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 17):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(4)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True))
    
@dp.message(Command('start'))
async def start_button(message: types.Message, bot: Bot):
    kb = [
        [types.KeyboardButton(text='–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, 
                                        resize_keyboard = True,
                                        one_time_keyboard=True)
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard)

@dp.message(F.text== "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º")
async def after(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–î–µ—Ç–µ–∫—Ç–∏–≤—ã", url="https://yandex.ru/search/?text=—Ç–æ–ø+5+—Ñ–∏–ª—å–º–æ–≤+–¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤")
)
    builder.row(types.InlineKeyboardButton(
        text="–¢—Ä–∏–ª–ª–µ—Ä—ã",
        url="https://yandex.ru/search/?text=—Ç–æ–ø+5+—Ñ–∏–ª—å–º–æ–≤+—Ç—Ä–∏–ª–ª–µ—Ä–æ–≤")
)
    builder.row(types.InlineKeyboardButton(
        text='–°–ª–µ—à–µ—Ä—ã', 
        url='https://yandex.ru/search/?text=—Ç–æ–ø+5+—Ñ–∏–ª—å–º–æ–≤+—Å–ª–µ—à–µ—Ä–æ–≤')
)
    builder.row(types.InlineKeyboardButton(
        text='–ë–æ–µ–≤–∏–∫–∏', 
        url='https://yandex.ru/search/?text=—Ç–æ–ø+5+—Ñ–∏–ª—å–º–æ–≤+–±–æ–µ–≤–∏–∫–æ–≤')
)
    builder.row(types.InlineKeyboardButton(
        text='–£–∂–∞—Å—ã',
        url='https://yandex.ru/search/?text=—Ç–æ–ø+5+—Ñ–∏–ª—å–º–æ–≤+—É–∂–∞—Å–æ–≤')
)
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä',
        reply_markup=builder.as_markup(), 
)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



